#!/bin/echo Use as an argument to mkroot.sh

download dcd986e9e7a02500cf9c909030a4ca9e999adba2 \
  https://kernel.org/pub/linux/kernel/v5.x/linux-5.4.8.tar.gz

[ -z "$TARGET" ] && TARGET="${CROSS_BASE/-*/}"
[ -z "$TARGET" ] && TARGET="$(uname -m)"

# Add generic info to arch-specific part of miniconfig
getminiconfig()
{
  echo "# make ARCH=$KARCH allnoconfig KCONFIG_ALLCONFIG=$TARGET.miniconf"
  echo "# make ARCH=$KARCH -j \$(nproc)"
  echo "# boot $VMLINUX"
  echo
  echo "$KERNEL_CONFIG"
  echo "
# CONFIG_EMBEDDED is not set
CONFIG_EARLY_PRINTK=y
CONFIG_BINFMT_ELF=y
CONFIG_BINFMT_SCRIPT=y
CONFIG_NO_HZ=y
CONFIG_HIGH_RES_TIMERS=y

CONFIG_BLK_DEV=y
CONFIG_BLK_DEV_INITRD=y
CONFIG_RD_GZIP=y

CONFIG_BLK_DEV_LOOP=y
CONFIG_EXT4_FS=y
CONFIG_EXT4_USE_FOR_EXT2=y
CONFIG_VFAT_FS=y
CONFIG_FAT_DEFAULT_UTF8=y
CONFIG_MISC_FILESYSTEMS=y
CONFIG_SQUASHFS=y
CONFIG_SQUASHFS_XATTR=y
CONFIG_SQUASHFS_ZLIB=y
CONFIG_DEVTMPFS=y
CONFIG_DEVTMPFS_MOUNT=y
CONFIG_TMPFS=y
CONFIG_TMPFS_POSIX_ACL=y

CONFIG_NET=y
CONFIG_PACKET=y
CONFIG_UNIX=y
CONFIG_INET=y
CONFIG_IPV6=y
CONFIG_NETDEVICES=y
#CONFIG_NET_CORE=y
#CONFIG_NETCONSOLE=y
CONFIG_ETHERNET=y
"
}

# Each target needs board, serial console, RTC, ethernet, block device.

# Target-specific info in an if/else staircase

if [ "$TARGET" == armv5l ]
then

  # This could use the same VIRT board as armv7, but let's demonstrate a
  # different one requiring a separate device tree binary.
  QEMU="qemu-system-arm -M versatilepb -net nic,model=rtl8139 -net user"
  KARCH=arm
  KARGS="console=ttyAMA0"
  VMLINUX=arch/arm/boot/zImage
  KERNEL_CONFIG="
CONFIG_CPU_ARM926T=y
CONFIG_MMU=y
CONFIG_VFP=y
CONFIG_ARM_THUMB=y
CONFIG_AEABI=y
CONFIG_ARCH_VERSATILE=y

# The switch to device-tree-only added this mess
CONFIG_ATAGS=y
CONFIG_DEPRECATED_PARAM_STRUCT=y
CONFIG_ARM_ATAG_DTB_COMPAT=y
CONFIG_ARM_ATAG_DTB_COMPAT_CMDLINE_EXTEND=y

CONFIG_SERIAL_AMBA_PL011=y
CONFIG_SERIAL_AMBA_PL011_CONSOLE=y

CONFIG_RTC_CLASS=y
CONFIG_RTC_DRV_PL031=y
CONFIG_RTC_HCTOSYS=y

CONFIG_PCI=y
CONFIG_PCI_VERSATILE=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI_SYM53C8XX_2=y
CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE=0
CONFIG_SCSI_SYM53C8XX_MMIO=y

CONFIG_NET_VENDOR_REALTEK=y
CONFIG_8139CP=y
"
  DTB=arch/arm/boot/dts/versatile-pb.dtb
elif [ "$TARGET" == armv7l ] || [ "$TARGET" == aarch64 ]
then
  if [ "$TARGET" == aarch64 ]
  then
    QEMU="qemu-system-aarch64 -M virt -cpu cortex-a57"
    KARCH=arm64
    VMLINUX=arch/arm64/boot/Image
  else
    QEMU="qemu-system-arm -M virt"
    KARCH=arm
    VMLINUX=arch/arm/boot/zImage
  fi
  KARGS="console=ttyAMA0"
  KERNEL_CONFIG="
CONFIG_MMU=y
CONFIG_ARCH_MULTI_V7=y
CONFIG_ARCH_VIRT=y
CONFIG_SOC_DRA7XX=y
CONFIG_ARCH_OMAP2PLUS_TYPICAL=y
CONFIG_ARCH_ALPINE=y
CONFIG_ARM_THUMB=y
CONFIG_VDSO=y
CONFIG_CPU_IDLE=y
CONFIG_ARM_CPUIDLE=y
CONFIG_KERNEL_MODE_NEON=y

CONFIG_SERIAL_AMBA_PL011=y
CONFIG_SERIAL_AMBA_PL011_CONSOLE=y

CONFIG_RTC_CLASS=y
CONFIG_RTC_HCTOSYS=y
CONFIG_RTC_DRV_PL031=y

CONFIG_NET_CORE=y
CONFIG_VIRTIO_MENU=y
CONFIG_VIRTIO_NET=y

CONFIG_PCI=y
CONFIG_PCI_HOST_GENERIC=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_MMIO=y

CONFIG_ATA=y
CONFIG_ATA_SFF=y
CONFIG_ATA_BMDMA=y
CONFIG_ATA_PIIX=y

CONFIG_PATA_PLATFORM=y
CONFIG_PATA_OF_PLATFORM=y
CONFIG_ATA_GENERIC=y
"
elif [ "$TARGET" == i486 ] || [ "$TARGET" == i686 ] ||
     [ "$TARGET" == x86_64 ] || [ "$TARGET" == x32 ]
then
  if [ "$TARGET" == i486 ]
  then
    QEMU="qemu-system-i386 -cpu 486 -global fw_cfg.dma_enabled=false"
    KERNEL_CONFIG="CONFIG_M486=y"
  elif [ "$TARGET" == i686 ]
  then
    QEMU="qemu-system-i386 -cpu pentium3"
    KERNEL_CONFIG="CONFIG_MPENTIUMII=y"
  else
    QEMU=qemu-system-x86_64
    KERNEL_CONFIG="CONFIG_64BIT=y"
    [ "$TARGET" == x32 ] && KERNEL_CONFIG="
$KERNEL_CONFIG
CONFIG_IA32_EMULATION=y
CONFIG_X86_X32=y
"
  fi
  KARCH=x86
  KARGS="console=ttyS0"
  VMLINUX=arch/x86/boot/bzImage
  CONFIG_MPENTIUMII=y
  KERNEL_CONFIG="
$KERNEL_CONFIG

CONFIG_UNWINDER_FRAME_POINTER=y

CONFIG_PCI=y
CONFIG_BLK_DEV_SD=y
CONFIG_ATA=y
CONFIG_ATA_SFF=y
CONFIG_ATA_BMDMA=y
CONFIG_ATA_PIIX=y

CONFIG_NET_VENDOR_INTEL=y
CONFIG_E1000=y
CONFIG_SERIAL_8250=y
CONFIG_SERIAL_8250_CONSOLE=y
CONFIG_RTC_CLASS=y
"
elif [ "$TARGET" = m68k ]
then
  QEMU="qemu-system-m68k -M q800"
  KARCH=m68k
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
  KERNEL_CONFIG="
CONFIG_MMU=y
CONFIG_M68040=y
CONFIG_M68KFPU_EMU=y
CONFIG_MAC=y
CONFIG_SCSI_MAC_ESP=y
CONFIG_MACINTOSH_DRIVERS=y
CONFIG_ADB=y
CONFIG_ADB_MACII=y
CONFIG_NET_CORE=y
CONFIG_NET_VENDOR_NATSEMI=y
CONFIG_MACSONIC=y
CONFIG_SERIAL_PMACZILOG=y
CONFIG_SERIAL_PMACZILOG_TTYS=y
CONFIG_SERIAL_PMACZILOG_CONSOLE=y
CONFIG_SCSI=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_LOWLEVEL=y
"
elif [ "$TARGET" == mips ] || [ "$TARGET" == mipsel ]
then
  QEMU="qemu-system-mips -M malta"
  KARCH=mips
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
  KERNEL_CONFIG="
CONFIG_MIPS_MALTA=y
CONFIG_CPU_MIPS32_R2=y
CONFIG_SERIAL_8250=y
CONFIG_SERIAL_8250_CONSOLE=y

CONFIG_PCI=y
CONFIG_BLK_DEV_SD=y
CONFIG_ATA=y
CONFIG_ATA_SFF=y
CONFIG_ATA_BMDMA=y
CONFIG_ATA_PIIX=y

CONFIG_NET_VENDOR_AMD=y
CONFIG_PCNET32=y

CONFIG_POWER_RESET=y
CONFIG_POWER_RESET_SYSCON=y
"
  [ "$TARGET" == mipsel ] &&
    KERNEL_CONFIG="${KERNEL_CONFIG}CONFIG_CPU_LITTLE_ENDIAN=y" &&
    QEMU="qemu-system-mipsel -M malta"
elif [ "$TARGET" == powerpc ]
then
  KARCH=powerpc
  QEMU="qemu-system-ppc -M g3beige"
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
  KERNEL_CONFIG="
CONFIG_ALTIVEC=y
CONFIG_PPC_PMAC=y
CONFIG_PPC_OF_BOOT_TRAMPOLINE=y

CONFIG_IDE=y
CONFIG_IDE_GD=y
CONFIG_IDE_GD_ATA=y
CONFIG_BLK_DEV_IDE_PMAC=y
CONFIG_BLK_DEV_IDE_PMAC_ATA100FIRST=y

CONFIG_MACINTOSH_DRIVERS=y
CONFIG_ADB=y
CONFIG_ADB_CUDA=y

CONFIG_NET_VENDOR_NATSEMI=y
CONFIG_NET_VENDOR_8390=y
CONFIG_NE2K_PCI=y

CONFIG_SERIO=y
CONFIG_SERIAL_PMACZILOG=y
CONFIG_SERIAL_PMACZILOG_TTYS=y
CONFIG_SERIAL_PMACZILOG_CONSOLE=y
CONFIG_BOOTX_TEXT=y
"
elif [ "$TARGET" == powerpc64le ]
then
  KARCH=powerpc
  QEMU="qemu-system-ppc64 -M pseries -vga none"
  KARGS="console=/dev/hvc0"
  VMLINUX=vmlinux
  KERNEL_CONFIG="CONFIG_PPC64=y
CONFIG_PPC_PSERIES=y
CONFIG_CPU_LITTLE_ENDIAN=y
CONFIG_PPC_OF_BOOT_TRAMPOLINE=y

CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI_IBMVSCSI=y
CONFIG_ATA=y

CONFIG_NET_VENDOR_IBM=y
CONFIG_IBMVETH=y
CONFIG_HVC_CONSOLE=y

# None of this should be necessary
CONFIG_PPC_TRANSACTIONAL_MEM=y
CONFIG_PPC_DISABLE_WERROR=y
CONFIG_SECTION_MISMATCH_WARN_ONLY=y
"
elif [ "$TARGET" = s390x ]
then
  QEMU="qemu-system-s390x"
  KARCH=s390
  VMLINUX=arch/s390/boot/bzImage
  KERNEL_CONFIG="
CONFIG_MARCH_Z900=y
CONFIG_PACK_STACK=y
CONFIG_NET_CORE=y
CONFIG_VIRTIO_NET=y
CONFIG_VIRTIO_BLK=y
CONFIG_SCLP_TTY=y
CONFIG_SCLP_CONSOLE=y
CONFIG_SCLP_VT220_TTY=y
CONFIG_SCLP_VT220_CONSOLE=y
CONFIG_S390_GUEST=y
"
elif [ "$TARGET" == sh4 ]
then
  QEMU="qemu-system-sh4 -M r2d -serial null -serial mon:stdio"
  KARCH=sh
  KARGS="console=ttySC1 noiotrap"
  VMLINUX=arch/sh/boot/zImage
  KERNEL_CONFIG="
CONFIG_CPU_SUBTYPE_SH7751R=y
CONFIG_MMU=y
CONFIG_MEMORY_START=0x0c000000
CONFIG_VSYSCALL=y
CONFIG_SH_FPU=y
CONFIG_SH_RTS7751R2D=y
CONFIG_RTS7751R2D_PLUS=y
CONFIG_SERIAL_SH_SCI=y
CONFIG_SERIAL_SH_SCI_CONSOLE=y

CONFIG_PCI=y
CONFIG_NET_VENDOR_REALTEK=y
CONFIG_8139CP=y

CONFIG_PCI=y
CONFIG_BLK_DEV_SD=y
CONFIG_ATA=y
CONFIG_ATA_SFF=y
CONFIG_ATA_BMDMA=y
CONFIG_PATA_PLATFORM=y

#CONFIG_SPI=y
#CONFIG_SPI_SH_SCI=y
#CONFIG_MFD_SM501=y

#CONFIG_RTC_CLASS=y
#CONFIG_RTC_DRV_R9701=y
#CONFIG_RTC_DRV_SH=y
#CONFIG_RTC_HCTOSYS=y
"
else
  echo "Unknown \$TARGET"
  exit 1
fi

# Build kernel

setupfor linux
echo "$QEMU -nographic -no-reboot -m 256" \
     "-append \"panic=1 HOST=$TARGET $KARGS\"" \
     "-kernel $(basename "$VMLINUX") -initrd ${CROSS_BASE}root.cpio.gz" \
     ${DTB:+-dtb "$(basename "$DTB")"} '"$@"' \
     > "$OUTPUT/qemu-$TARGET.sh" &&
chmod +x "$OUTPUT/qemu-$TARGET.sh" &&
getminiconfig > "$OUTPUT/$TARGET.miniconf" &&
make ARCH=$KARCH allnoconfig KCONFIG_ALLCONFIG="$OUTPUT/$TARGET.miniconf" &&
make ARCH=$KARCH CROSS_COMPILE="$CROSS_COMPILE" -j $(nproc) || exit 1

if [ ! -z "$DTB" ]
then
  cp "$DTB" "$OUTPUT/$(basename "$DTB")" || exit 1
fi

cp "$VMLINUX" "$OUTPUT/$(basename "$VMLINUX")"
cleanup

echo === create "${CROSS_BASE}root.cpio.gz"

(cd "$ROOT" && find . | cpio -o -H newc | gzip) > \
  "$OUTPUT/${CROSS_BASE}root.cpio.gz"
